---
ogimage: ./content/img/default-og.png
ogtype: article
---
<!doctype html>
<html lang="{{ metadata.language }}">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>{{ title or metadata.title }}</title>
		<meta name="description" content="{{ description or metadata.description }}">
		<link rel="alternate" href="feed/feed.xml" type="application/atom+xml" title="{{ metadata.title }}">

		{#- Open Graph / Social Media Preview Tags #}
		<meta property="og:title" content="{{ title or metadata.title }}">
		<meta property="og:description" content="{{ description or metadata.description }}">
		<meta property="og:type" content="{% if page.url == '/' %}website{% else %}article{% endif %}">
		<meta property="og:url" content="{{ metadata.url }}{{ page.url }}">
		<meta property="og:site_name" content="{{ metadata.title }}">
		{%- if socialImage or ogimage %}
		<meta property="og:image" content="{% makeOGImg socialImage or ogimage, metadata.url %}">
		<meta property="og:image:width" content="1200">
		<meta property="og:image:height" content="630">
		{%- endif %}
		{%- if author %}
		<meta property="article:author" content="{{ author.name }}">
		{%- endif %}
		{%- if date %}
		<meta property="article:published_time" content="{{ date | htmlDateString }}">
		{%- endif %}

		{#- Twitter Card Tags #}
		<meta name="twitter:card" content="{% if socialImage or ogimage %}summary_large_image{% else %}summary{% endif %}">
		<meta name="twitter:title" content="{{ title or metadata.title }}">
		<meta name="twitter:description" content="{{ description or metadata.description }}">
		{%- if socialImage or ogimage %}
		<meta name="twitter:image" content="{% makeOGImg socialImage or ogimage, metadata.url %}">
		{%- endif %}

		 <meta name="generator" content="{{ eleventy.generator }}"> 

		{#-
		Plain-text bundles are provided via the `eleventy-plugin-bundle` plugin:
		1. CSS:
			* Add to a per-page bundle using `{% css %}{% endcss %}`
			* Retrieve bundle content using `{% getBundle "css" %}` or `{% getBundleFileUrl "css" %}`
		2. Or for JavaScript:
			* Add to a per-page bundle using `{% js %}{% endjs %}`
			* Retrieve via `{% getBundle "js" %}` or `{% getBundleFileUrl "js" %}`
		3. Learn more: https://github.com/11ty/eleventy-plugin-bundle
		#}

		{#- Add an arbitrary string to the bundle #}
		{%- css %}/* This is an arbitrary CSS string added to the bundle */{% endcss %}
		
		{#- Add animated gradient background #}
		{%- css %}
		/* Animated gradient background */
		@keyframes gradientShift {
			0% {
				background-position: 0% 50%;
			}
			50% {
				background-position: 100% 50%;
			}
			100% {
				background-position: 0% 50%;
			}
		}
		
		html {
			background: linear-gradient(-45deg, #cad0ff, #e3e3e3, #d0d6ff, #e8e8e8, #c4caff, #dddddd, #b8c4ff, #d6d6d6);
			background-size: 400% 400%;
			animation: gradientShift 40s ease infinite;
			min-height: 100vh;
			width: 100%;
			margin: 0;
			padding: 0;
		}
		
		body {
			background: transparent;
			background-color: transparent !important;
			margin: 0;
			padding: 0;
		}
		
		/* Add semi-transparent background for content areas */
		main {
			background: rgba(255, 255, 255, 0.9);
			backdrop-filter: blur(10px);
			border-radius: 12px;
			margin: 2rem auto;
			padding: 2rem;
			max-width: 40em;
			box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
		}
		
		header {
			background: rgba(255, 255, 255, 0.8);
			backdrop-filter: blur(10px);
			border-radius: 12px;
			margin: 1rem 0;
			box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
		}
		
		/* Dark mode gradient */
		@media (prefers-color-scheme: dark) {
			@keyframes gradientShiftDark {
				0% {
					background-position: 0% 50%;
				}
				50% {
					background-position: 100% 50%;
				}
				100% {
					background-position: 0% 50%;
				}
			}
			
			html {
				background: linear-gradient(-45deg, #1a1f3a, #2d2d2d, #1f2440, #333333, #151a35, #2a2a2a) !important;
				background-size: 300% 300% !important;
				animation: gradientShiftDark 20s ease infinite !important;
			}
						
			main {
				background: rgba(21, 32, 43, 0.9);
				backdrop-filter: blur(10px);
			}
			
			header {
				background: rgba(21, 32, 43, 0.8);
				backdrop-filter: blur(10px);
			}
		}
		{%- endcss %}
		
		{#- Autumn Leaves Animation Overlay #}
		{%- css %}
		/* Autumn Leaves Overlay */
		#autumn-leaves-container {
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			pointer-events: none;
			z-index: 9999;
			overflow: hidden;
		}
		
		.autumn-leaf {
			position: absolute;
			pointer-events: none;
			opacity: 0;
			will-change: transform, opacity;
		}
		
		/* Leaf fade in and fall animation */
		@keyframes leafFall {
			0% {
				opacity: 0;
				transform: translateY(-10vh) rotate(0deg);
			}
			10% {
				opacity: 0.8;
			}
			100% {
				opacity: 0;
				transform: translateY(110vh) rotate(720deg);
			}
		}
		
		/* Subtle horizontal drift */
		@keyframes leafDrift {
			0%, 100% {
				transform: translateX(0);
			}
			50% {
				transform: translateX(30px);
			}
		}
		{%- endcss %}
		
		{#- Add the contents of a file to the bundle #}
		{%- css %}{% include "public/css/index.css" %}{% endcss %}
		{#- Or you can add from node_modules #}
		{# {%- css %}{% include "node_modules/prismjs/themes/prism-okaidia.css" %}{% endcss %} #}

		{#- Render the CSS bundle using inlined CSS (for the fastest site performance in production) #}
		<style>{% getBundle "css" %}</style>
		{#- Renders the CSS bundle using a separate file, if you can't set CSP directive style-src: 'unsafe-inline' #}
		{#- <link rel="stylesheet" href="{% getBundleFileUrl "css" %}"> #}

		{#- Add the heading-anchors web component to the JavaScript bundle #}
		{%- js %}{% include "node_modules/@zachleat/heading-anchors/heading-anchors.js" %}{% endjs %}
	</head>
	<body>
		{#- Autumn Leaves Overlay Container #}
		<div id="autumn-leaves-container" aria-hidden="true"></div>
		
		<a href="#skip" class="visually-hidden">Skip to main content</a>

		<header>
			<a href="/" class="home-link">{{ metadata.title }}</a>

			{#- Read more about `eleventy-navigation` at https://www.11ty.dev/docs/plugins/navigation/ #}
			<nav>
				<h2 class="visually-hidden">Top level navigation menu</h2>
				<ul class="nav">
				{%- for entry in collections.all | eleventyNavigation %}
					<li class="nav-item"><a href="{{ entry.url }}"{% if entry.url == page.url %} aria-current="page"{% endif %}>{{ entry.title }}</a></li>
				{%- endfor %}
				</ul>
			</nav>
		</header>

		<main id="skip">
			<heading-anchors>
				{{ content | safe }}
			</heading-anchors>
		</main>

		<footer>
			<p><em>Built with <a href="https://www.11ty.dev/">{{ eleventy.generator }}</a></em></p>
		</footer>

		<!-- This page `{{ page.url | htmlBaseUrl }}` was built on {% currentBuildDate %} -->
		<script type="module" src="{% getBundleFileUrl "js" %}"></script>
		
		{#- Autumn Leaves Animation Script #}
		<script>
		(function() {
			// Autumn leaf colors (orange, red, yellow, brown tones)
			const leafColors = [
				'#D2691E', // Chocolate
				'#FF8C00', // Dark orange
				'#CD853F', // Peru
				'#DAA520', // Goldenrod
				'#B8860B', // Dark goldenrod
				'#8B4513', // Saddle brown
				'#A0522D', // Sienna
				'#FF6347', // Tomato
				'#FFA500', // Orange
				'#FFD700'  // Gold
			];
			
			// SVG leaf shape
			function createLeafSVG(color, size) {
				return `<svg width="${size}" height="${size}" viewBox="0 0 24 24" fill="${color}" xmlns="http://www.w3.org/2000/svg">
					<path d="M17,8C8,10 5.9,16.17 3.82,21.34L5.71,22L6.66,19.7C7.14,19.87 7.64,20 8,20C19,20 22,3 22,3C21,5 14,5.25 9,6.25C4,7.25 2,11.5 2,13.5C2,15.5 3.75,17.25 3.75,17.25C7,8 17,8 17,8Z" />
				</svg>`;
			}
			
			// Create a single leaf element
			function createLeaf() {
				const container = document.getElementById('autumn-leaves-container');
				if (!container) return;
				
				const leaf = document.createElement('div');
				leaf.className = 'autumn-leaf';
				
				// Random properties for variety
				const size = Math.random() * 15 + 10; // 10-25px
				const startX = Math.random() * 100; // 0-100% of viewport width
				const duration = Math.random() * 15 + 15; // 15-30 seconds
				const driftDuration = Math.random() * 3 + 2; // 2-5 seconds
				const delay = Math.random() * 5; // 0-5 seconds delay
				const color = leafColors[Math.floor(Math.random() * leafColors.length)];
				
				// Set leaf properties
				leaf.innerHTML = createLeafSVG(color, size);
				leaf.style.left = `${startX}%`;
				leaf.style.animation = `leafFall ${duration}s linear ${delay}s forwards, leafDrift ${driftDuration}s ease-in-out ${delay}s infinite`;
				
				// Add leaf to container
				container.appendChild(leaf);
				
				// Remove leaf after animation completes
				setTimeout(() => {
					leaf.remove();
				}, (duration + delay) * 1000);
			}
			
			// Start the animation when page loads
			function initializeLeaves() {
				// Create initial batch of leaves
				const initialLeaves = 8;
				for (let i = 0; i < initialLeaves; i++) {
					setTimeout(() => createLeaf(), i * 2000); // Stagger initial leaves
				}
				
				// Continue creating leaves periodically (event-driven: based on interval completion)
				let leafCount = 0;
				const maxLeaves = 30; // Limit total leaves created
				
				const leafInterval = setInterval(() => {
					if (leafCount >= maxLeaves) {
						clearInterval(leafInterval);
						return;
					}
					createLeaf();
					leafCount++;
				}, 3000); // New leaf every 3 seconds
			}
			
			// Initialize on page load
			if (document.readyState === 'loading') {
				document.addEventListener('DOMContentLoaded', initializeLeaves);
			} else {
				initializeLeaves();
			}
		})();
		</script>
	</body>
</html>
